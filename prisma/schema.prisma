generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  name                  String?
  password              String?
  emailVerified         DateTime?
  image                 String?
  account_creation_date DateTime       @default(now())
  phone_number          String?
  address               String?
  gender                String?
  username              String?        @unique
  Accounts              Account[]
  Comments              Comment[]
  File                  File[]
  Sessions              Session[]
  UserPriority          UserPriority[]
  UserStatus            UserStatus[]
}

model Role {
  id          String  @id @default(uuid())
  roleName    String
  description String?
}

model Organization {
  id      String @id @default(uuid())
  orgName String
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
}

model UserOrganization {
  id     String @id @default(uuid())
  userId String
  orgId  String
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id        String   @id @default(cuid())
  name      String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  type      String
  User      User?    @relation(fields: [createdBy], references: [id])
}

model UserTeam {
  id     Int    @id @default(autoincrement())
  userId String
  teamId Int
}

model Team {
  id           Int           @id @default(autoincrement())
  teamName     String
  ProjectTeams ProjectTeam[]
}

model Project {
  name        String
  description String?
  endDate     DateTime?
  startDate   DateTime?
  id          Int           @id @default(autoincrement())
  ProjectTeam ProjectTeam[]
  Task        Task[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id           Int            @id @default(autoincrement())
  title        String
  description  String?
  status       String
  priority     String
  tags         String?
  startDate    DateTime?
  dueDate      DateTime?
  projectId    Int
  project      Project        @relation(fields: [projectId], references: [id])
  TaskPriority TaskPriority[]
  TaskStatus   TaskStatus[]
  TaskTag      TaskTag[]
}

model TaskStatus {
  id       String @id @default(uuid())
  taskId   Int
  statusId String
  status   Status @relation(fields: [statusId], references: [id])
  task     Task   @relation(fields: [taskId], references: [id])
}

model TaskPriority {
  id         String   @id @default(uuid())
  taskId     Int
  priorityId String
  priority   Priority @relation(fields: [priorityId], references: [id])
  task       Task     @relation(fields: [taskId], references: [id])
}

model Tag {
  id      String    @id @default(uuid())
  name    String
  TaskTag TaskTag[]
}

model TaskTag {
  id     String @id @default(uuid())
  taskId Int
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  task   Task   @relation(fields: [taskId], references: [id])
}

model TaskAssignment {
  id     Int    @id @default(autoincrement())
  userId String
  taskId Int
}

model Attachment {
  id       Int     @id @default(autoincrement())
  fileURL  String
  fileName String?
  taskId   String?
  userId   String?
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int?
  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model Column {
  id    String  @id @default(uuid())
  name  String  @unique
  color String?
  slug  String  @unique
}

model Priority {
  id            String          @id @default(uuid())
  slug          String          @unique
  name          String
  PriorityColor PriorityColor[]
  TaskPriority  TaskPriority[]
  UserPriority  UserPriority[]
}

model Status {
  id          String        @id @default(uuid())
  slug        String        @unique
  name        String
  StatusColor StatusColor[]
  TaskStatus  TaskStatus[]
  UserStatus  UserStatus[]
}

model Color {
  id            String          @id @default(uuid())
  slug          String          @unique
  name          String
  PriorityColor PriorityColor[]
  StatusColor   StatusColor[]
}

model StatusColor {
  id       String @id @default(uuid())
  statusId String
  colorId  String
  color    Color  @relation(fields: [colorId], references: [id])
  status   Status @relation(fields: [statusId], references: [id])
}

model PriorityColor {
  id         String   @id @default(uuid())
  priorityId String
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id])
  priority   Priority @relation(fields: [priorityId], references: [id])
}

model UserPriority {
  id         String   @id @default(uuid())
  userId     String
  priorityId String
  priority   Priority @relation(fields: [priorityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model UserStatus {
  id       String @id @default(uuid())
  userId   String
  statusId String
  status   Status @relation(fields: [statusId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}
